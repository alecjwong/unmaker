// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnMaker.Components.Data;

#nullable disable

namespace UnMaker.Migrations
{
    [DbContext(typeof(UnMakerContext))]
    [Migration("20240207062929_NewColumns")]
    partial class NewColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("UnMaker.Components.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Boost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BorderColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardArtURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardBackURL")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EffectBackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("EffectBackgroundPatternURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("EffectColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("EffectFont")
                        .HasColumnType("TEXT");

                    b.Property<string>("EffectSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("Effects")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameBackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameBackgroundPatternURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameFont")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleFont")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSize")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("UnMaker.Components.Models.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundPatternURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardBackImageURL")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeckBuilderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeckId");

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("UnMaker.Components.Models.HeroCard", b =>
                {
                    b.Property<int>("HeroCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ability")
                        .HasColumnType("TEXT");

                    b.Property<string>("AbilityColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("AbilityFont")
                        .HasColumnType("TEXT");

                    b.Property<string>("AbilitySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("BorderColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("BottomBackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("BottomBackgroundPatternURL")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HealthColor")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeroHealth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeroName")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeroRange")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Move")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameFont")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameSize")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumSidekicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Quote")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuoteColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuoteFont")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuoteSize")
                        .HasColumnType("TEXT");

                    b.Property<int>("SidekickHealth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SidekickName")
                        .HasColumnType("TEXT");

                    b.Property<int>("SidekickRange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopBackgroundColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("TopBackgroundPatternURL")
                        .HasColumnType("TEXT");

                    b.HasKey("HeroCardId");

                    b.ToTable("HeroCard");
                });
#pragma warning restore 612, 618
        }
    }
}
